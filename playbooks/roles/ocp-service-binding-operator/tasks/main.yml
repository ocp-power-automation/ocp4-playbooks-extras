# Clean SBO resources before installing newer SBO
- block:
  # Delete output
  - name: Delete output file 
    file:
      state: absent
      path: /root/service-binding-operator

  - name: Get the installed ClusterServiceVersion of SBO 
    shell: oc get csv -n openshift-operators --no-headers | awk '{ if (($1 ~ /^service-binding/) && $NF=="Succeeded") print $1 }'
    register: installed_csv

  - name: Delete the SBO ClusterServiceVersion if exists
    k8s:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{installed_csv.stdout}}"
      namespace: openshift-operators
      state: absent
    when: installed_csv.stdout | length > 0

  - name: Delete the SBO Subscription if exists
    k8s:
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: rh-service-binding-operator
      namespace: openshift-operators
      state: absent

  - name: Delete the SBO OperatorGroup if exists
    k8s:
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      name: global-operators
      namespace: openshift-operators
      state: absent

  # End play after cleaning up if sbo_cleanup is set 
  - meta: end_play
    when: sbo_cleanup

# Check if cluster health is good
- name: Check all cluster operators are available
  shell: oc get co | awk 'NR>1 {if($3=="False" ||  $4=="True" || $5=="True" ){print $1}}'
  register: co
  failed_when: co.stdout | length >  0

- name: Check all nodes are healthy
  shell: oc wait --all --for=condition=Ready nodes 

# Get the cluster version
- name: Get the cluster version
  shell: oc version | grep "Server Version:" | cut -d':' -f2 | cut -d'.' -f1-2
  register: cluster_version

- set_fact: 
    ocp_cluster_version: cluster_version
       
# Install necessary packages
- name: Install packages
  yum:
    name:
    - git
    - "@Development tools"
    state: latest

# Custom ImageContentSourcePolicy and CatalogSource
- name: Create ImageContentSourcePolicy and CatalogSource
  block: 
  - name: Set fact variable for CatalogSource name
    set_fact:
      sbo_catalogsource_name: "service-binding-operator"

  - name: Include role to create ImageContentSourcePolicy and CatalogSource
    include_role:
      name: set-custom-catalogsource
    vars:
      custom_catalogsource_name: "{{sbo_catalogsource_name}}"
      custom_catalogsource_display_name: "SBO Operator"
      custom_catalogsource_image: "{{sbo_catalogsource_image}}"
  when: sbo_catalogsource_image != '' and sbo_catalogsource_image != None 

# Set disableAllDefaultSources to false because some SBO tests require default catalog sources
- name: Setting disableAllDefaultSources to false
  shell: oc patch operatorhub.config.openshift.io/cluster -p='{"spec":{"disableAllDefaultSources":false}}' --type=merge

- name: Pause for 1 minutes
  pause:
    minutes: 1

# Create Subscription for the Service Binding Operator
- name: Create Subscription for Service Binding Operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: rh-service-binding-operator
        namespace: openshift-operators
      spec:
        channel: "{{ sbo_update_channel | default('stable', true) }}"
        name: rh-service-binding-operator
        source: "{{ sbo_catalogsource_name | default('redhat-operators', true) }}"
        sourceNamespace: openshift-marketplace

# Create OperatorGroup
- name: Create OperatorGroup for Service Binding Operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: global-operators
        namespace: openshift-operators
      spec: {}

# Verify the operator installation
- name: Verify the operator installation
  shell: oc get csv -n openshift-operators --no-headers | awk '{ if (($1 ~ /^service-binding/) && $NF=="Succeeded") print $1 }'| wc -l
  register: operators
  until: operators.stdout|int == 1
  retries: 15
  delay: 120

# Run acceptance tests for Service Binding Operator
- name: Run acceptance tests for Service Binding Operator and store results
  block:
  # Cloning Service Binding Operator tests repository
  - name: Cloning Service Binding Operator tests repository
    git:
      repo: 'https://github.com/redhat-developer/service-binding-operator.git'
      dest: /root/service-binding-operator
      version: "{{ sbo_git_branch }}"

  # Installing Go Lang
  - name: Include role for installation of Go lang
    include_role:
      name: golang-installation
    vars:
      go_tarball: "{{ golang_tarball_sbo | default('https://dl.google.com/go/go1.17.6.linux-ppc64le.tar.gz', true) }}" 
      golang_path: "/usr/local/"
  
  # Running SBO tests
  - name: Run acceptance tests for Service Binding Operator
    shell: |
      TEST_ACCEPTANCE_START_SBO=remote make test-acceptance 2>&1 > /root/service-binding-operator/results.txt
    args:
      chdir: /root/service-binding-operator
      executable: /bin/bash
    environment: "{{ sbo_env }}"
    register: output
    ignore_errors: yes

  - debug: 
      msg: "Acceptance test results are stored at /root/service-binding-operator/results.txt"

  - name: Compress acceptance tests directory contents
    become: yes
    archive:
      path: /root/service-binding-operator/out/acceptance-tests
      dest: /root/service-binding-operator/acceptance-tests.tar
      format: tar

  - debug:
      msg: "Acceptance test logs are stored at /root/service-binding-operator/acceptance-tests.tar"

  when: acceptance_tests
