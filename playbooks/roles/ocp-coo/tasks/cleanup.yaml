- name: Clean up
  block:
  - name: Delete prometheus-datasource configmap
    kubernetes.core.k8s:
      state: absent
      namespace: openshift-config-managed
      kind: ConfigMap
      name: prometheus-datasource-test

  - name: Delete test-db-plugin-admin configmap
    kubernetes.core.k8s:
      state: absent
      namespace: openshift-config-managed
      kind: ConfigMap
      name: test-db-plugin-admin

  - name: Register all UIPlugins name 
    shell: oc get UIPlugin -o json | jq .items[].metadata.name
    register: uiplugin_names

  - name: Delete all the UIPlugins
    shell: oc delete UIPlugin -o name {{ item }}
    loop: "{{ uiplugin_names.stdout.split() }}"

  - name: Delete Thanoquerier
    kubernetes.core.k8s:
      state: absent
      api_version: monitoring.rhobs/v1alpha1
      namespace: "{{ coo_e2e_namespace }}"
      kind: ThanosQuerier
      name: example-thanos

  - name: Delete MonitoringStack
    kubernetes.core.k8s:
      state: absent
      api_version: monitoring.rhobs/v1alpha1
      namespace: "{{ coo_e2e_namespace }}"
      kind: MonitoringStack
      name: multi-ns

  - name: Delete ClusterLogging instance
    kubernetes.core.k8s:
      state: absent
      api_version: "logging.openshift.io/v1"
      namespace: "{{ coo_logstack_namespace }}"
      kind: ClusterLogging
      name: instance

  - name: Delete LokiStack instance
    kubernetes.core.k8s:
      state: absent
      api_version: loki.grafana.com/v1
      namespace: "{{ coo_logstack_namespace }}"
      kind: LokiStack
      name: lokistack-sample

  - name: Delete the namespace chainsaw_test_namespace
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: "{{ chainsaw_test_namespace }}"

  - name: Check if the chainsaw_test_namespace gets deleted
    shell: oc get namespace --no-headers | grep "{{ chainsaw_test_namespace }}" | wc -l
    register: chainsaw_test_namespace_count
    until: chainsaw_test_namespace_count.stdout|int == 0
    retries: 15
    delay: 30

  - name: Delete Test data deployment
    kubernetes.core.k8s:
      state: absent
      namespace: default
      kind: Deployment 
      name: bad-deployment

  - name: Delete the namespace coo_e2e_namespace
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: "{{ coo_e2e_namespace }}"

  - name: Check if the coo_e2e_namespace gets deleted
    shell: oc get namespace --no-headers | grep "{{ coo_e2e_namespace }}" | wc -l
    register: coo_e2e_namespace_count
    until: coo_e2e_namespace_count.stdout|int == 0
    retries: 15
    delay: 30

  - name: Delete the workspace
    file:
      path: "{{ coo_work_dir }}"
      state: "absent"

  - name: Get the name of cluster service version
    shell: oc get clusterserviceversion -n "{{ coo_namespace }}" | awk '{ if ($1 ~ /cluster-observability-operator/) print $1 }'
    register: coo_csv

  - name: Get the name of subscription
    shell: oc get subscription -n "{{ coo_namespace }}" | awk '{ if ($1 ~ /cluster-observability/) print $1 }'
    register: coo_subscription

  - name: Get the name of operator group
    shell: oc get operatorgroup -n "{{ coo_namespace }}" | awk '{ if ($1 ~ /og/) print $1 }'
    register: coo_operator_group

  - name: Delete the subscription if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: "{{ coo_subscription.stdout }}"
      namespace: "{{ coo_namespace }}"
    when: coo_subscription.stdout|length > 0

  - name: Delete the operator group if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      name: "{{ coo_operator_group.stdout }}"
      namespace: "{{ coo_namespace }}"
    when: coo_operator_group.stdout|length > 0

  - name: Delete the cluster service version if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ coo_csv.stdout }}"
      namespace: "{{ coo_namespace }}"
    when: coo_csv.stdout|length > 0

  - name: Check if all the pods has been deleted
    shell: oc get pods -n "{{ coo_namespace }}" --no-headers | wc -l
    register: coo_pods
    until: coo_pods.stdout|int == 0
    retries: 15
    delay: 20

  - name: Delete the namespace if exists
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: "{{ coo_namespace }}"

  - name: Check if the namespace gets deleted
    shell: oc get namespace --no-headers | grep openshift-observability-operator | wc -l
    register: coo_namespace_count
    until: coo_namespace_count.stdout|int == 0
    retries: 15
    delay: 30
  when: coo_cleanup
  