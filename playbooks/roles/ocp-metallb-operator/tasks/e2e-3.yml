---

# Validate L2 advertisement creation and update
- name: Validate L2 advertisement creation and update
  block:
  - name: Check if all the pods are running
    shell: oc get pods -n "{{ metallb_namespace }}" --no-headers | grep -v "Running\|Completed" | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
    retries: 10
    delay: 60

  - name: Get the worker node name
    shell: oc get nodes | grep worker | head -1 | awk '{if ($1 ~ /worker/) print $1}'
    register: worker_node
    failed_when: worker_node.stdout_lines|length < 1

  - name: Create IP Address pool
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: ip-addresspool-l2
          namespace: "{{ metallb_namespace }}"
        spec:
          protocol: layer2
          addresses:
            - "{{ l2_address[0] }}/32"
          autoAssign: true

  - name: Create another IP Address pool
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          labels:
            zone: east
          name: ip-addresspool-l2-a
          namespace: "{{ metallb_namespace }}"
        spec:
          protocol: layer2
          addresses:
            - "{{ l2_address[1] }}/32"
          autoAssign: true

  - name: Verify the IP Address pool created
    shell: oc get ipaddresspool -n "{{ metallb_namespace }}" --no-headers | grep "ip-addresspool" | wc -l
    register: address_pool
    failed_when: address_pool.stdout|int != 2

  - name: Create L2 advertisement
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"
        spec:
          ipAddressPoolSelectors:
            - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east

  - name: Validate if the L2Advertisement is successfully created
    shell: oc get l2advertisement -n "{{ metallb_namespace }}" --no-headers | grep l2-adv | wc -l
    register: l2adv
    failed_when: l2adv.stdout|int != 1

  - name: Edit L2 advertisement object with address pool
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"
        spec:
          ipAddressPoolSelectors:
            - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
          ipAddressPools:
            - ip-addresspool-l2

  - name: Edit L2 advertisement object with same ip address pool name to see error
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"
        spec:
          ipAddressPoolSelectors:
            - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
          ipAddressPools:
            - ip-addresspool-l2
            - ip-addresspool-l2
    register: l2adverror
    ignore_errors: true
    failed_when: "'duplicate definition' not in l2adverror.msg"

  - name: Edit L2 advertisement object to add node selector
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"
        spec:
          ipAddressPoolSelectors:
            - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
          ipAddressPools:
            - ip-addresspool-l2
          nodeSelectors:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - "{{ worker_node.stdout }}"

  - name: Edit L2 advertisement object to add same node to see error
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"
        spec:
          ipAddressPoolSelectors:
            - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
          ipAddressPools:
            - ip-addresspool-l2
          nodeSelectors:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - "{{ worker_node.stdout }}"
                    - "{{ worker_node.stdout }}"
    register: l2adverror
    ignore_errors: true
    failed_when: "'duplicate definition' not in l2adverror.msg"

  # Delete the L2 advertisement and addresspool
  - name: Delete L2 advertisement
    kubernetes.core.k8s:
      state: absent
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2-adv
          namespace: "{{ metallb_namespace }}"

  - name: Delete L2 address pool
    kubernetes.core.k8s:
      state: absent
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: ip-addresspool-l2
          namespace: "{{ metallb_namespace }}"

  - name: Delete L2 address pool
    kubernetes.core.k8s:
      state: absent
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: ip-addresspool-l2-a
          namespace: "{{ metallb_namespace }}"

  - name: Delete the instance of metallb operator
    include_tasks: operator-cleanup.yml
  when: metallb_e2e

# Verify the LoadBalancer service uses the right protocol based on address available from L2 or BGP address pool
- name: Verify the LoadBalancer service uses the right protocol based on address available from L2 or BGP address pool
  block:
  - name: Install metallb speakers only on the worker nodes by creating the metallb CR.
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: MetalLB
        metadata:
          name: metallb
          namespace: "{{ metallb_namespace }}"
        spec:
          nodeSelector:
            node-role.kubernetes.io/worker: ""
  - name: Verify the speakers and controller pods running
    shell: oc get pods -n "{{ metallb_namespace }}" --no-headers | grep -v "Running\|Completed" | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
    retries: 10
    delay: 60

  - name: Configure FRR on bastion
    shell: |
      FRRVER="{{ metallb_frr_ver }}"
      curl -O "{{ metallb_frr_rpm }}"
      sudo yum install ./$FRRVER*
      sudo yum install frr -y
      systemctl status frr
      systemctl restart frr
      systemctl status frr
    register: frrconf

  - name: Open port 179 on bastion
    shell: |
      sudo firewall-cmd --add-port=179/tcp
      sudo firewall-cmd --add-port=179/udp

  # Add conf and zebra files
  # Get the speaker pods ip address
  - name: Verify the speakers and controller pods running
    shell: oc get pods -n "{{ metallb_namespace }}" -o wide | awk '{if ($1 ~ /^speaker/) print $6}'
    register: speaker_pods
    failed_when: speaker_pods.stdout_lines|length != 2

  - name: Add conf details
    blockinfile:
      path: /etc/frr/frr.conf
      block: |
        debug bgp updates
        debug bgp neighbor
        debug bgp nht
        debug bfd peer
        log file /tmp/frr.log debugging
        log timestamp precision 3
        
        router bgp 64521
         bgp router-id {{ ansible_default_ipv4.address }}
         timers bgp 3 15
         no bgp ebgp-requires-policy
         no bgp default ipv4-unicast
         no bgp network import-check
         neighbor ocpmetallb peer-group
         neighbor ocpmetallb remote-as 64521
          neighbor {{ speaker_pods.stdout_lines[0] }} peer-group ocpmetallb
          neighbor {{ speaker_pods.stdout_lines[1] }} peer-group ocpmetallb
        
         address-family ipv4 unicast
          neighbor {{ speaker_pods.stdout_lines[0] }} next-hop-self
          neighbor {{ speaker_pods.stdout_lines[0] }} activate
          neighbor {{ speaker_pods.stdout_lines[1] }} next-hop-self
          neighbor {{ speaker_pods.stdout_lines[1] }} activate
      state: present
      backup: yes

  - name: Add details in zebra.conf
    copy:
      dest: /etc/frr/zebra.conf
      content: |
        hostname {{ ansible_hostname }}
        debug zebra nht
        interface eth0
         ip address {{ ansible_default_ipv4.address }}/22

  - name: Create IP Address pool for layer 2
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: address-pool-silver-l2
          namespace: "{{ metallb_namespace }}"
        spec:
          protocol: layer2
          addresses:
            - "{{ l2_address[0] }}-{{ l2_address[0] }}"

  - name: Create IP Address pool for bgp
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: address-pool-silver-bgp
          namespace: "{{ metallb_namespace }}"
        spec:
          protocol: bgp
          autoAssign: true
          addresses:
            - "{{ bgp_address[0] }}/32"

  - name: Create BGP Peer
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: BGPPeer
        metadata:
          name: peer-no-bfd
          namespace: "{{ metallb_namespace }}"
        spec:
          myASN: 65500
          peerASN: 64521
          peerAddress: "{{ ansible_default_ipv4.address }}"

  - name: Check if the bgppeer is created successfully
    shell: oc get bgppeer -n "{{ metallb_namespace }}" --no-headers | wc -l
    register: bgppeer
    failed_when: bgppeer.stdout|int != 1

  - name: Delete the project if it exists already
    shell: oc delete project test
    ignore_errors: true

  - name: Create a project
    shell: oc new-project test

  - name: Create a replica set
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: ReplicaSet
        metadata:
          name: hello-world
          namespace: test
          labels:
            app: hello-world
        spec:
          selector:
            matchLabels:
              app: hello-world
          replicas: 2
          template:
            metadata:
              labels:
                app: hello-world
            spec:
              containers:
                - name: hello-world
                  image: "{{ metallb_test_image }}"
                  imagePullPolicy: Always
                  ports:
                    - containerPort: 8080
                      protocol: TCP

  - name: Create a service
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: hello-world
          namespace: test
        spec:
          selector:
            app: hello-world
          ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
          type: LoadBalancer

  - name: Check if the loadbalancer service is proper
    shell: oc get svc -n test --no-headers | awk '{if ($2 ~ /LoadBalancer/)  print $4}'
    register: metallb_svc
    until: metallb_svc.stdout != "<pending>"
    retries: 10
    delay: 40

  - name: Fetch the speaker pod name
    shell: oc get pods -n "{{ metallb_namespace }}" -o wide | awk '{if ($1 ~ /^speaker/) print $1}'
    register: speaker_pods
    failed_when: speaker_pods.stdout_lines|length != 2

  # check show-running-config
  - name: check show-running-config
    shell: oc exec -n "{{ metallb_namespace }}" {{ speaker_pods.stdout_lines[0] }} -c frr -- vtysh -c "show running-config"
    register: running_config
    failed_when: running_config.stderr != ""

  - name: check show bgp neighbor
    shell: oc exec -n "{{ metallb_namespace }}" {{ speaker_pods.stdout_lines[0] }} -c frr -- vtysh -c "show bgp neighbor"
    register: bgp_neighbor
    failed_when: bgp_neighbor.stderr != ""

  - name: Create a replica set
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: ReplicaSet
        metadata:
          name: hello-world-new
          namespace: test
          labels:
            app: hello-world-new
        spec:
          selector:
            matchLabels:
              app: hello-world-new
          replicas: 2
          template:
            metadata:
              labels:
                app: hello-world-new
            spec:
              containers:
                - name: hello-world-new
                  image: "{{ metallb_test_image }}"
                  imagePullPolicy: Always
                  ports:
                    - containerPort: 8080
                      protocol: TCP

  - name: Create a service with externalTrafficPolicy 'Local'
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: hello-world-new
          namespace: test
        spec:
          selector:
            app: hello-world-new
          ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
          type: LoadBalancer
          externalTrafficPolicy: Local

  - name: Check if the loadbalancer service is proper
    shell: oc get svc -n default --no-headers | awk '{if ($2 ~ /hello-world-new/)  print $4}'
    register: metallb_svc
    failed_when: metallb_svc.stdout == "<pending>"

  # validate the externaltraffic policy

  - name: Create a replica set
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: ReplicaSet
        metadata:
          name: hello-world-new-1
          namespace: test
          labels:
            app: hello-world-new-1
        spec:
          selector:
            matchLabels:
              app: hello-world-new-1
          replicas: 2
          template:
            metadata:
              labels:
                app: hello-world-new-1
            spec:
              containers:
                - name: hello-world-new-1
                  image: "{{ metallb_test_image }}"
                  imagePullPolicy: Always
                  ports:
                    - containerPort: 8080
                      protocol: TCP

  - name: Create a service with externalTrafficPolicy 'Local'
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: hello-world-new-1
          namespace: test
        spec:
          selector:
            app: hello-world-new-1
          ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
          type: LoadBalancer
          externalTrafficPolicy: Local

  - name: Check if the loadbalancer service is proper
    shell: oc get svc -n default --no-headers | awk '{if ($2 ~ /hello-world-new-1/)  print $4}'
    register: metallb_svc
    failed_when: metallb_svc.stdout == "<pending>"

  - name: Delete the replica set
    kubernetes.core.k8s:
      state: absent
      api_version: apps/v1
      kind: ReplicaSet
      name: hello-world-new-1
      namespace: test

  - name: Delete the service
    kubernetes.core.k8s:
      state: absent
      api_version: v1
      kind: Service
      name: hello-world-new-1
      namespace: test

  - name: Delete the replica set
    kubernetes.core.k8s:
      state: absent
      api_version: apps/v1
      kind: ReplicaSet
      name: hello-world-new
      namespace: test

  - name: Delete the service
    kubernetes.core.k8s:
      state: absent
      api_version: v1
      kind: Service
      name: hello-world-new
      namespace: test

  - name: Delete the replica set
    kubernetes.core.k8s:
      state: absent
      api_version: apps/v1
      kind: ReplicaSet
      name: hello-world
      namespace: test

  - name: Delete the service
    kubernetes.core.k8s:
      state: absent
      api_version: v1
      kind: Service
      name: hello-world
      namespace: test

  - name: Delete IP Address pool for bgp
    kubernetes.core.k8s:
      state: absent
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: address-pool-silver-bgp
          namespace: "{{ metallb_namespace }}"

  - name: Delete IP Address pool for layer2
    kubernetes.core.k8s:
      state: absent
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: address-pool-silver-l2
          namespace: "{{ metallb_namespace }}"

  - name: Delete the instance of metallb operator
    include_tasks: operator-cleanup.yml
  when: metallb_e2e
